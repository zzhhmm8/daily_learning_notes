学习c++笔记
day 1
A写法
#include<iostream>
using namespace std;

int main()
{
  int a = 10;
  cout<<"a="<<a<<endl;
  system("pause");
  return 0;
}

B写法
#include<iostream>

int main()
{
  std::cout<<"a="<<a<<std::endl;
  system("pause");
  return 0;
}

B写法在大型项目时比A写法更好，避免使用 using namespace std; 是为了避免潜在的命名冲突和不必要的命名空间污染。
疑问：似乎没觉得c++ "<<" 这种写法比c语言简洁易懂，这样写的必要？
C++中使用 `<<` 符号（左移运算符）来进行输出操作，相比于C语言中的 `printf` 函数或 `puts` 函数有一些优点和好处：

1. 类型安全：使用 `<<` 运算符时，编译器可以在编译时执行类型检查，确保你将正确的数据类型输出到流中。这提高了程序的类型安全性，避免了一些常见的格式化字符串错误。

2. 自定义输出操作符：在C++中，你可以自定义输出操作符（`<<` 运算符的重载），以便在自定义类或数据结构上进行输出。这使得你可以定义如何输出你的数据类型，从而提高了可读性和灵活性。

3. 连接输出：你可以轻松地将多个数据项连接在一起输出，而不需要格式化字符串，这使得代码更简洁和可读。例如，`cout << "Hello, " << name << "!" << endl;` 可以直接将字符串和变量连接在一起输出。

4. 链式操作：`<<` 运算符的链式使用允许你在一行代码中执行多个输出操作，从而提高了代码的紧凑性。你可以多次使用 `<<` 将不同的数据项输出到流中。

5. 简化格式化：与 `printf` 中的格式化字符串相比，`<<` 运算符更容易使用，不需要编写复杂的格式化字符串，并且更容易阅读和维护。

总之，`<<` 运算符在C++中用于输出的方式更加现代、类型安全、可扩展和可读，这些特性有助于减少错误、提高代码质量，并提供更大的灵活性。不过，C语言的 `printf` 仍然是一种有效的输出方式，特别是在需要更精确的格式化控制时。所以，选择使用哪种方式取决于具体的需求和编程风格。
